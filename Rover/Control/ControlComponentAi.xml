<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../schema/ISF/component_schema.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<component name="Control" kind="active" namespace="Rover">
    <import_port_type>Fw/Buffer/BufferSendPortAi.xml</import_port_type>
    <import_port_type>Drv/GpioDriverPorts/GpioReadPortAi.xml</import_port_type>
    <import_port_type>Drv/GpioDriverPorts/GpioWritePortAi.xml</import_port_type>
    <import_port_type>Svc/Sched/SchedPortAi.xml</import_port_type>
    <comment>A rover control component</comment>
    <ports>
        <port name="Run" data_type="Svc::Sched" kind="async_input">
            <comment>
            Input Scheduler port - called at 1Hz and 10Hz
            </comment>
        </port>
        <port name="GpioWrite" data_type="Drv::GpioWrite" kind="output"  max_number="5">
            <comment>
            Output Port for writing GPIO values
            </comment>
        </port>
    </ports>
    <commands>
        <command kind="async" opcode="0" mnemonic="ROVER_MOVE">
            <comment> Controls the rover to move with a certain direction and power. Power controls a software PWM for the primary engine. This will also accept a duration for the action in milliseconds. Zero duration will run forever.</comment>
            <args>
                <arg name="action" type="ENUM">
                    <enum name="MoveDirection">
                        <item name="MOVE_IDLE"/>
                        <item name="MOVE_BREAK"/>
                        <item name="MOVE_FORWARD"/>
                        <item name="MOVE_BACKWARD"/>
                        <item name="MOVE_FORWARD_LEFT"/>
                        <item name="MOVE_FORWARD_RIGHT"/>
                        <item name="MOVE_BACKWARD_LEFT"/>
                        <item name="MOVE_BACKWARD_RIGHT"/>
                    </enum>
                    <comment>Directionality of the movement.</comment>
                </arg>
                <arg name="power" type="U8">
                    <comment>Power for movement 0-100.</comment>
                </arg>
                <arg name="duration" type="U32">
                    <comment>Duration in milliseconds to perform this action. A zero will run the action forever.</comment>
                </arg>
            </args>
        </command>
        <command kind="async" opcode="1" mnemonic="ROVER_HEADLIGHT">
            <comment> Controls the rover headlights.</comment>
            <args>
                <arg name="action" type="ENUM">
                    <enum name="HeadlightsOnOff">
                        <item name="HEADLIGHTS_ON"/>
                        <item name="HEADLIGHTS_OFF"/>
                    </enum>
                    <comment>State to command headlights</comment>
                </arg>
            </args>
        </command>
        <command kind="async" opcode="2" mnemonic="ROVER_SNAPSHOT">
            <comment>Controls the rover headlights.</comment>
            <args>
                <arg name="filename" type="string" size="80">
                    <comment>Snapshot filename</comment>
                </arg>
            </args>
        </command>
        <command kind="sync" opcode="3" mnemonic="ROVER_MOVE_ABORT">
            <comment>Aborts the current motion.</comment>
        </command>
    </commands>
    <telemetry>
        <channel id="0" name="HeadlightState" data_type="ENUM" update="on_change">
            <enum name="HeadlightsStatus">
                <item name="LIGHTS_ON"/>
                <item name="LIGHTS_OFF"/>
            </enum>
            <comment>State of the headlights</comment>
        </channel>
    </telemetry>
    <events>
        <event id="0" name="RoverAction" severity="ACTIVITY_HI" format_string="Rover %d at power %u for %u ms">
            <comment> Lists the rover's actions with a certain direction and power. Power controls a software PWM for the primary engine. This will also accept a duration for the action in milliseconds. Zero duration will run forever.</comment>
            <args>
                <arg name="action" type="ENUM">
                    <enum name="MoveEvent">
                        <item name="MOVE_EVENT_IDLE"/>
                        <item name="MOVE_EVENT_FORCE_IDLE"/>
                        <item name="MOVE_EVENT_BREAK"/>
                        <item name="MOVE_EVENT_FORWARD"/>
                        <item name="MOVE_EVENT_BACKWARD"/>
                        <item name="MOVE_EVENT_FORWARD_LEFT"/>
                        <item name="MOVE_EVENT_FORWARD_RIGHT"/>
                        <item name="MOVE_EVENT_BACKWARD_LEFT"/>
                        <item name="MOVE_EVENT_BACKWARD_RIGHT"/>
                    </enum>
                    <comment>Directionality of the movement.</comment>
                </arg>
                <arg name="power" type="U32">
                    <comment>Power for movement 0-100.</comment>
                </arg>
                <arg name="duration" type="U32">
                    <comment>Duration in milliseconds to perform this action. A zero will run the action forever.</comment>
                </arg>
            </args>
        </event>
    </events>
</component>

